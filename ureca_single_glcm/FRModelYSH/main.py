#%%import osimport numpy as npimport pandas as pdfrom sklearn.ensemble import RandomForestClassifierfrom sklearn.metrics import accuracy_score, classification_report, balanced_accuracy_scoreimport matplotlib#matplotlib.use('TkAgg')import matplotlib.pyplot as pltimport seaborn as snfrom glcm_loader import load_glcmfrom augment_tree import sample_a_treefrom generate_features import generate_feature_from_tree_all, generate_feature_from_tree_mean, generate_feature_from_tree_median, generate_feature_from_tree_percentile, generate_for_all_percentilesimport warningswarnings.filterwarnings("ignore", category=FutureWarning) # CONFIGURATIONSSMALL_TREES = ["Calophyllum", "Dillenia Suffruticosa", "Shorea Leprosula", "Sterculia Parviflora"]LARGE_TREES = ["Falcataria Moluccana", "Ficus Variegata", "Spathodea Campanulatum", "Campnosperma Auriculatum"]TRAIN_FOLDER = 'data/dec_all_7rad_15step_128bins/'TEST_FOLDER = 'data/may_all_7rad_15step_128bins/'SAMPLE_COUNT = 20SAMPLE_CROP_SIZE = 6MAX_SAMPLE_CROP_SIZE = 20 # 20 X 20 samples#%%'''@author: shen hwei'''def load_needed_files(data_folder):    tree_files = [i for i in os.listdir(data_folder) if i[0] != "." ]  # Exclude all with . in the start    tree_files_filtered = [tree for tree in tree_files if any(keyword in tree for keyword in LARGE_TREES)]    return data_folder, tree_files_filtered'''@author: chris, shen hwei'''def dataloader(data_folder, tree_files, sample_count, sample_crop_size):    glcm_features = pd.DataFrame()    df_sizes = pd.DataFrame()    for treefile in tree_files:        tree = load_glcm(data_folder + treefile)        x = treefile.split('_')        name = x[-2] # get name of trees from file name        block_out = np.zeros(tree.shape[0:2], dtype=int)        for i in range(sample_count):            tree_sample = sample_a_tree(tree, sample_crop_size, block_out)            sample_features = generate_for_all_percentiles(tree_sample)            sample_features.insert(0, name)            sample_features_series = pd.Series(sample_features)            glcm_features = glcm_features.append(sample_features_series, ignore_index=True)    return glcm_features'''@author: chris'''def make_rf_model(X_train, y_train):    # scaler = StandardScaler()    # X = scaler.fit_transform(X)    rfclassifier = RandomForestClassifier(n_estimators=100, criterion='gini', random_state=21, max_depth = 5)    rfclassifier.fit(X_train, y_train)    return rfclassifier#%%train_folder, train_tree_files = load_needed_files(TRAIN_FOLDER)test_folder, test_tree_files = load_needed_files(TEST_FOLDER)train_dataset = dataloader(train_folder, train_tree_files, SAMPLE_COUNT, SAMPLE_CROP_SIZE)test_dataset = dataloader(test_folder, test_tree_files, SAMPLE_COUNT, SAMPLE_CROP_SIZE)factor = pd.factorize(train_dataset[0])factor_names = factor[0]definitions = factor[1]#%%X_train = train_dataset.iloc[:, 1:].valuesy_train = train_dataset.iloc[:, 0].valuesmodel = make_rf_model(X_train, y_train)X_test = test_dataset.iloc[:, 1:].valuesy_test = test_dataset.iloc[:, 0].valuesy_pred = model.predict(X_test)#%%pd.set_option('display.max_columns', None)pd.set_option('display.width', None)# , y_pred, rownames=['Actual Species'], colnames=['Predicted Species'])contigency_matrix = pd.crosstab(y_test, y_pred, rownames=['Actual Species'], colnames=['Predicted Species'])print(contigency_matrix)fig, ax = plt.subplots(figsize=(10, 10))sn.heatmap(ax=ax, data=contigency_matrix, annot=True, cmap="Reds")plt.tight_layout()plt.title('trained on Dec20, tested on May21')plt.show()print("accuracy: ", accuracy_score(y_test, y_pred))print("balanced_accuracy: ", balanced_accuracy_score(y_test, y_pred))print(classification_report(y_test, y_pred))